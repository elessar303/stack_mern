{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAgB9C,OACI,0BAAMC,SATW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IACxBR,GAAe,SAAAS,GAAU,OAAKP,GAAL,mBAAmBO,OAC5CN,EAAc,OAMd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAjBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,Y,uBCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAIQ,EAAIG,OAAOC,iBAAiBZ,QAVrB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAnBJ,EAAkB,EAAlBA,GAAGC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAIlC,OAFAc,QAAQC,IAAIN,EAAGC,EAAMV,GAGjB,yBAAKgB,UAAU,0CACX,yBAAKC,IAAMjB,EAAMkB,IAAMR,IACvB,2BAAKA,KCLJS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECDX,SAAEA,GAAc,IAAD,EAEbd,mBAAS,CAC/BqB,KAAK,GACLe,SAAQ,IAJ2B,mBAEhCC,EAFgC,KAEzBC,EAFyB,KAkBvC,OAXAC,qBAAW,WAEP1B,EAASC,GAAW0B,MAAM,SAAAC,GACtBH,EAAS,CACLjB,KAAKoB,EACLL,SAAQ,SAIlB,CAACtB,IAEIuB,EDfkBK,CAAa5B,GAA9BO,EAF2B,EAE3BA,KAAKe,EAFsB,EAEtBA,QAEb,OACI,oCACI,wBAAIJ,UAAU,qCAAsClB,GACnDsB,GAAW,uBAAGJ,UAAU,oCAAb,cACZ,yBAAKA,UAAU,aAGHX,EAAKE,KAAK,SAAAC,GAAG,OACT,kBAAC,EAAD,eACImB,IAAKnB,EAAIC,IACJD,UEdxBoB,EAAe,WAAM,MAIM5C,mBAAS,CAAC,gBAJhB,mBAIvBQ,EAJuB,KAIXT,EAJW,KAS9B,OACI,oCACI,8CACA,kBAAC,EAAD,CAAaA,cAAkBA,IAC/B,6BACA,4BAEQS,EAAWe,KAAK,SAACT,GAAD,OACZ,kBAAC,EAAD,CACI6B,IAAQ7B,EACRA,SAAaA,U,MClBzC+B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.653b2502.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('')\n\n    const handleInputChange = (e) =>{\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) =>{\n        e.preventDefault();\n        if(inputValue.trim().length>2){\n            setCategories( categories => [inputValue,...categories])\n            setInputValue('')\n        }\n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>  \n            <input \n                type=\"text\"\n                value={inputValue}\n                onChange={ handleInputChange }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories:PropTypes.func.isRequired\n}\n","export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&api_key=Az66overhQ6KkXI5uSl357586mCk4tYn&limit=10`;\n    const resp = await fetch( url );\n\n    const {data} = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id:img.id,\n            title:img.title,\n            url:img.images.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({id,title,url}) => {\n\n    console.log(id,title,url)\n\n    return (\n        <div className='card animate__animated animate__fadeIn'>\n            <img src={ url } alt={ title } />\n            <p>{ title }</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n    \n    const { data,loading } = useFetchGifs(category);\n    \n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\n            {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\n            <div className='card-grid'>\n                \n                    {\n                        data.map( img => \n                            <GifGridItem \n                                key={img.id}\n                                { ...img}\n                            />\n                        )\n                    }\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = ( category ) =>{\n\n    const [state, setState] = useState({\n        data:[],\n        loading:true\n    });\n\n    useEffect( () => {\n\n        getGifs( category ).then( imgs => {\n            setState({\n                data:imgs,\n                loading:false\n            })\n        })\n\n    },[category])\n\n    return state;\n}","import React, {useState} from 'react'\nimport { AddCategory } from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    //const categories = ['Evangelion', 'Dragon Ball', 'Death Note'];\n\n    const [categories, setCategories] = useState(['Dragon Ball']);\n\n    /*const handleAdd = () =>{\n        setCategories([...categories, 'Samurai X'])\n    }*/\n    return (\n        <>\n            <h2>Gif Expert App</h2>\n            <AddCategory setCategories = { setCategories } />\n            <hr/>\n            <ol>\n                {\n                    categories.map( (category) => \n                        <GifGrid \n                            key = { category }\n                            category = { category }\n                        />\n                    )\n                }\n            </ol>\n        </>\n    )\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}